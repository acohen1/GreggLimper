import asyncio
from types import SimpleNamespace

from gregg_limper.formatter import format_message, classify
from gregg_limper.formatter.model import TextFragment, LinkFragment


class DummyMessage(SimpleNamespace):
    pass


async def run(coro):
    return await coro


def make_message(content="", attachments=None, mentions=None, guild_me=None):
    attachments = attachments or []
    mentions = mentions or []
    return DummyMessage(
        content=content,
        attachments=attachments,
        id=42,
        author=SimpleNamespace(display_name="Tester"),
        channel=SimpleNamespace(id=7),
        guild=SimpleNamespace(id=3, me=guild_me),
        mentions=mentions,
    )


def test_classify_splits_text_and_links():
    msg = make_message("Check this https://example.com")
    result = classify(msg)
    assert "text" in result and result["text"] == "Check this"
    assert result["link"] == ["https://example.com"]


async def _fake_summarize_url(url, enable_citations=True):
    return f"summary of {url}"


def test_format_message_end_to_end(monkeypatch):
    # Patch network-heavy summarization
    monkeypatch.setattr(
        "gregg_limper.formatter.handlers.link.summarize_url", _fake_summarize_url
    )
    msg = make_message("Look https://example.com")
    result = asyncio.run(format_message(msg))
    assert result["author"] == "Tester"
    frags = result["fragments"]
    assert len(frags) == 2
    assert isinstance(frags[0], TextFragment)
    assert frags[0].description == "Look"
    assert isinstance(frags[1], LinkFragment)
    assert frags[1].description == "summary of https://example.com"
    # ids generated by stable_media_id should not be empty
    assert frags[0].id and frags[1].id


def test_text_handler_ignores_bot_ping_only():
    mention = SimpleNamespace(id=999, display_name="GreggLimper")
    bot = SimpleNamespace(id=999, display_name="GreggLimper", name="GreggLimper")
    msg = make_message("<@999>", mentions=[mention], guild_me=bot)

    result = asyncio.run(format_message(msg))
    assert result["fragments"] == []


def test_text_handler_replaces_mentions():
    mention = SimpleNamespace(id=999, display_name="Gregg")
    bot = SimpleNamespace(id=999, display_name="Gregg", name="Gregg")
    msg = make_message("Hey <@999> what's up", mentions=[mention], guild_me=bot)

    result = asyncio.run(format_message(msg))
    fragments = result["fragments"]
    assert len(fragments) == 1
    assert isinstance(fragments[0], TextFragment)
    assert fragments[0].description == "Hey Gregg what's up"
